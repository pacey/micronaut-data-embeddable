plugins {
    id 'java'
    id 'application'
    id "net.ltgt.apt-eclipse" version "0.21"
    id "com.github.johnrengelman.shadow" version "5.0.0"
}

group 'com.github.pacey'
version '1.0-SNAPSHOT'
mainClassName = "com.github.pacey.embeddable.Application"

ext {
    micronautVersion = '1.3.7'
    micronautDataVersion = '1.1.3'
    assertJVersion = '3.16.1'
    mockitoJunitVersion = '3.3.0'
}

configurations {
    all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            String group = details.requested.group
            if (group == 'io.micronaut.data') {
                details.useVersion(micronautDataVersion)
            }
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {

    annotationProcessor(
        platform("io.micronaut:micronaut-bom:${micronautVersion}"),
        "io.micronaut:micronaut-inject-java",
        "io.micronaut:micronaut-validation",
        "io.micronaut.data:micronaut-data-processor:${micronautDataVersion}",
    )

    implementation(
        platform("io.micronaut:micronaut-bom:${micronautVersion}"),
        "io.micronaut:micronaut-inject",
        "io.micronaut:micronaut-runtime",
        "io.micronaut:micronaut-validation",
        "io.micronaut.data:micronaut-data-jdbc",
        "io.micronaut.configuration:micronaut-flyway",
    )

    runtime(
        "io.micronaut.configuration:micronaut-jdbc-hikari",
    )

    runtimeOnly(
        "com.h2database:h2",
        "ch.qos.logback:logback-classic:1.2.3",
    )

    testImplementation(
        "io.micronaut:micronaut-inject-java",
        "io.micronaut.test:micronaut-test-junit5",
        "org.assertj:assertj-core:${assertJVersion}",
        "org.junit.jupiter:junit-jupiter-api",
        "org.mockito:mockito-junit-jupiter:${mockitoJunitVersion}",
    )

    testRuntimeOnly(
        "org.junit.jupiter:junit-jupiter-engine",
    )

    testAnnotationProcessor(
        platform("io.micronaut:micronaut-bom:${micronautVersion}"),
        "io.micronaut:micronaut-inject-java",
    )
}

test {
    useJUnitPlatform {
        includeEngines 'junit-jupiter'
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

shadowJar {
    mergeServiceFiles()
}

run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
